# EPN, Thu Sep 24 10:34:18 2015
# pwd: /panfs/pan1/dnaorg/programs/15_0924_dnaorg_annotate_genomes
# git repository url: https://github.com/nawrockie/dnaorg_annotate_genomes.pl.git
#
# Example of running dnaorg_annotate_genomes.pl to annotate viral genomes
# of species X given a single reference sequence for X.
#
# Regarding line prefixes in this file:
# '#':  a comment line (text written just for this file).
# "##": line output from a command
# "":   a command to use when learning about this file
#
#
# This is a wrapper Perl script which calls other programs,
# including those housed/described in the following directories:
#
# esl-fetch-cds.pl: /panfs/pan1/dnaorg/programs/15_0324_esl_fetch_cds/
# 
# Other executables called by this script, which (currently) have
# hard-coded paths in the script:
# 
# program        package          url
# cmalign        Infernal v1.1.1  http://infernal.janelia.org/
# cmbuild        Infernal v1.1.1  http://infernal.janelia.org/
# cmfetch        Infernal v1.1.1  http://infernal.janelia.org/
# cmpress        Infernal v1.1.1  http://infernal.janelia.org/
# cmscan         Infernal v1.1.1  http://infernal.janelia.org/
# hmmalign       HMMER v3.1b2     hmmer.org
# hmmbuild       HMMER v3.1b2     hmmer.org
# hmmfetch       HMMER v3.1b2     hmmer.org
# hmmpress       HMMER v3.1b2     hmmer.org
# nhmmscan       HMMER v3.1b2     hmmer.org
# esl-translate  Easel            GitHub: https://github.com/EddyRivasLab/easel.git
# esl-ssplit     Bio-Easel        SVN:    https://xfamsvn.ebi.ac.uk/svn/code
#
# This is a Perl script that uses the Bio-Easel library which uses
# Inline C to interact and call functions from the Easel sequence
# analysis library from Sean Eddy's group.
#
# Also, prior to running this script, the dnaorg_virus_wrapper.pl
# script must first by run to gather the necessary input information
# for this script. dnaorg_virus_wrapper.pl is documented here:
# /panfs/pan1/dnaorg/programs/15_0529_dnaorg_virus_wrapper/00NOTES.txt
# An example of running that script is included below in the 'Example
# run' section
#
#######################
# More information
#######################
#
# For more information, see the 00NOTES.* files in the above listed
# 'dnaorg/programs/' directories, where available.
#
# For more information on the .ntlist files used as input to this script 
# see the bottom of the file:
# /panfs/pan1/dnaorg/programs/15_0529_dnaorg_virus_wrapper/00NOTES.txt.
#
# Also, see arguably voluminous notes on development of this script in
# /home/nawrocke/notebook/15_0810_dnaorg_virus_annotate/
# for notes on development and testing of this program and several of 
# the scripts it calls.
#
# The NCBI JIRA tickets VIV-254 and VIV-272 may also be relevant.
# 
#######################
# Prerequisites
#######################
# 
# Directories that include the BioEasel perl modules must be part of your
# $PERL5LIB environment variable in order for esl-fetch-cds.pl to work.
# 
# For bash shell users
source /panfs/pan1/dnaorg/programs/setup-bio-easel.bash.sh
# For C shell or C shell compatible users
source /panfs/pan1/dnaorg/programs/setup-bio-easel.csh.sh
#
# (THESE PREREQUISITES ARE THE SAME AS THOSE NEEDED FOR 
#  dnaorg_fetch_dna_wrapper.pl)
#
#######################
# Usage and options
#######################
#
# The default output is informative about how to use the script:
#
# dnaorg_annotate_genomes.pl
#	<directory created by dnaorg_virus_wrapper.pl>
#	<list file with all accessions>
#
# This script annotates genomes from the same species based
# on reference annotation. The 
#
# BASIC OPTIONS:
#  -nocorrect : do not correct annotations based on internal start/stop codons in predicted exons/CDS
#  -matpept   : use mat_peptide info instead of CDS info
#  -oseq <s>  : identify origin sequence <s> in genomes, put | at site of origin, e.g. TAATATT|AC
#  -strict    : require matching annotations to match CDS/exon index
#  -nodup     : do not duplicate each genome to allow identification of features that span stop..start
#  -notexon   : do not use exon-specific models
#  -onlybuild : exit after building reference models
#  -model <s> : use model file <s>, instead of building one
#
# OPTIONS CONTROLLING OUTPUT TABLE:
#  -c         : concise output mode (enables -nomdlb -noexist -nobrack and -nostop)
#  -nomdlb    : do not add model boundary annotation to output
#  -noexist   : do not include information on existing annotation
#  -nobrack   : do not include brackets around predicted annotations that do not match existing
#  -nostop    : do not output stop codon for each predicted CDS
#  -nofid     : do not output fractional identity relative to reference for each CDS/exon
#  -noss3     : do not output results of start codon, stop codon and multiple of 3 tests
#  -noolap    : do not output overlap information
#  -noexp     : do not output explanation of column headings
#
# OPTIONS FOR SELECTING HOMOLOGY SEARCH ALGORITHM:
#  -hmmer     : use HMMER for predicting annotations, default: use Infernal
#
# OPTIONS SPECIFIC TO HMMER3:
#  -hmmenv  : use HMM envelope boundaries for predicted annotations, default: use window boundaries
#
# OPTIONS SPECIFIC TO INFERNAL:
#  -iglocal      : use the -g option with cmsearch for glocal searches
#  -cslow        : use default cmcalibrate parameters, not parameters optimized for speed
#  -ccluster     : submit calibration to cluster and exit (requires --onlybuild)
#  -scluster <n> : split genome file into <n> pieces, submit <n> cmscan jobs and wait 3 minutes
#                  (changeable with -swait) before concatenating all the output files and continuing
#  -swait <n>    : with -scluster, set number of minutes to wait for cmscan jobs to finish to <n> [df: 3]
#
# OPTIONS USEFUL FOR DEVELOPMENT/DEBUGGING:
#  -skipfetch : use existing cmscan/hmmscan results, don't actually run it
#  -skipscan  : use existing cmscan/hmmscan results, don't actually run it
#  -skipaln   : use existing cmscan/hmmscan and alignment results, don't actually run it
#
#################################
# Example run:
#
# This section is divided into 3 steps:
# 
# STEP 0. Running dnaorg_virus_wrapper.pl (necessary prior to running 
#         dnaorg_annotate_genomes.pl).
#
# STEP 1. Run dnaorg_annotate_genomes.pl with the 
#         -onlybuild and -ccluster flags to build models
#         of each reference exon and submit 'calibration'
#         of those models to the cluster.
#
# STEP 2. Run dnaorg_annotate_genomes.pl with the 
#         -model and -skipfetch options to skip the
#         model building and genome fetching steps
#         and to proceed with annotating the genomes.
#
# Step 0 is necessary (as the usage above states) because 
# dnaorg_virus_wrapper.pl must be run prior to running 
# dnaorg_annotate_genomes.pl. This will create input files
# required for dnaorg_annotate_genomes.pl
# 
# Here's an example of running the dnaorg_virus_wrapper.pl script 
# for 5 Maize streak virus genomes. 
#
# Input file: NC_001346.ntlist
#
cat NC_001346.ntlist
##NC_001346
##KJ699341
##KJ437659
##HQ693446
##HQ693435
# 
#---------------------------------------------------
# STEP 0. Running dnaorg_virus_wrapper.pl: 
##
perl /panfs/pan1/dnaorg/programs/dnaorg_virus_wrapper.pl NC_001346.ntlist 
##Step 1: creating feature table ... done. [perl /panfs/pan1/dnaorg/programs/dnaorg_fetch_dna_wrapper.pl -f -ntlist -ftable -d NC_001346 NC_001346.ntlist > /dev/null]
##Step 2: parsing feature table ... done. [perl /panfs/pan1/dnaorg/programs/dnaorg_parse_ftable.pl  -d NC_001346 NC_001346/NC_001346.ftable NC_001346 > /dev/null]
##Step 3: comparing genomes ... done. [perl /panfs/pan1/dnaorg/programs/dnaorg_compare_genomes.pl -protid -codonstart -s -product NC_001346 NC_001346/NC_001346.ntlist.not_suppressed > NC_001346/NC_001346.compare]
### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### dnaorg_compare_genomes.pl: Compare GenBank annotation of genomes
### - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
### command: /panfs/pan1/dnaorg/programs/dnaorg_compare_genomes.pl -s -product -protid -codonstart  NC_001346 NC_001346/NC_001346.ntlist.not_suppressed
### date:    Thu Sep 24 11:05:46 2015
### option:  outputting CDS names as accessions [-s]
### option:  adding 'product' qualifier values to output sequence file deflines [-product]
### option:  adding 'protein_id' qualifier values to output sequence file deflines [-protid]
### option:  adding 'codon_start' qualifier values to output sequence file deflines [-codonstart]
###
###accn       #cds   #pos   #neg  #both  #unkn  strand-string  cls  tot-len       g1     g2     g3     g4
##NC_001346      4      2      2      0      0  ++--             1     2689      306    735   1083    819
##KJ699341       4      2      2      0      0  ++--             1     2689      306    735   1083    819
##KJ437659       4      2      2      0      0  ++--             1     2689      306    735   1083    819
##
##HQ693446       3      2      1      0      0  ++-              2     2690      306    735    819
##HQ693435       3      2      1      0      0  ++-              2     2690      306    735    819
##
##
### Number-of-classes: 2
### class  #accn  #genes  strand-string
### -----  -----  ------  -------------
##      1      3       4  ++--
##      2      2       3  ++-
## -----  -----  ------  -------------
##  total      5       7  N/A
##    avg    2.5     3.5  N/A
##
### Fetching   3 full genome sequences for class  1 ... done. [NC_001346/NC_001346.c1.fg.fa]
### Fetching   3 CDS sequences for class  1 gene  1 ... done. [NC_001346/NC_001346.c1.g1.fa]
### Fetching   3 CDS sequences for class  1 gene  2 ... done. [NC_001346/NC_001346.c1.g2.fa]
### Fetching   3 CDS sequences for class  1 gene  3 ... done. [NC_001346/NC_001346.c1.g3.fa]
### Fetching   3 CDS sequences for class  1 gene  4 ... done. [NC_001346/NC_001346.c1.g4.fa]
### Fetching   2 full genome sequences for class  2 ... done. [NC_001346/NC_001346.c2.fg.fa]
### Fetching   2 CDS sequences for class  2 gene  1 ... done. [NC_001346/NC_001346.c2.g1.fa]
### Fetching   2 CDS sequences for class  2 gene  2 ... done. [NC_001346/NC_001346.c2.g2.fa]
### Fetching   2 CDS sequences for class  2 gene  3 ... done. [NC_001346/NC_001346.c2.g3.fa]
###[ok]
#
# The output here is not particularly relevant. What is relevant are the
# output files created in the newly created NC_001346 directory. In
# particular the NC_001346.CDS.tbl file:
#
ls -ltr NC_001346/NC_001346.CDS.tbl 
#-rw-r--r-- 1 nawrocke oblast 2014 Sep 24 11:05 NC_001346/NC_001346.CDS.tbl
#
# This file contains all the CDS information from all accessions in a
# tabular form. The dnaorg_annotate_genomes.pl script will use this
# information. Of particular relevance is the CDS annotation information
# for the reference accession (the first accession listed in the .ntlist
# file: NC_001346).
#
# --------------------------------------------------
# STEP 1. Run dnaorg_annotate_genomes.pl with the 
#         -onlybuild and -ccluster flags to build models
#         of each reference exon and submit 'calibration'
#         of those models to the cluster.
# 
# Now we are ready to run dnaorg_annotate_genomes.pl. 
# Actually, in the current implementation we typically 
# do this in two separate calls to the script.
#
# The first call will do the following:
# a) fetches all genome sequences
# b) fetches exon sequences from reference CDS
# c) builds a covariance model (CM) from each reference
#    exon sequence
# d) calibrates all CMs (does an expensive simulation to determine
#    statistical parameters for assigning E-values to homology search
#    scores).
#
# Step (d) in particular is a slow step (tens of minutes up to several
# hours), which is why it is typical to split the usage of the script
# into two runs.
#
# The first run can be executed using the -onlybuild and -ccluster
# command line options. It will actually not perform the calibration
# (step d) but rather will submit the calibration computation to the
# cluster and exit. It is up to the user to monitor when that
# calibration is done. Once it is, the second call to
# dnaorg_annotate_genomes.pl can be executed as detailed below. But
# first, let's execute the first call:
#
perl dnaorg_annotate_genomes.pl -onlybuild -ccluster NC_001346 NC_001346.ntlist
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## dnaorg_annotate_genomes.pl: Annotate genomes based on a reference and homology search
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## command: dnaorg_annotate_genomes.pl -onlybuild -ccluster  NC_001346 NC_001346.ntlist
## date:    Thu Sep 24 11:18:51 2015
## option:  exit after model construction step [-onlybuild]
## option:  submit calibration job to cluster [-ccluster]
##
## Fetching 5 full (duplicated) genome sequences                   ... done. [0.9 seconds]
## Fetching reference CDS sequences                                ... done. [0.1 seconds]
## Running cmbuild to build 5 CMs                                  ... done. [30.6 seconds]
#Your job 6405307 ("cp.NC_001346.ref") has been submitted
##
## Model calibration job submitted. Exiting.
#
# The user can monitor the progress of this job, using qstat and by
# looking at the output of cmcalibrate, which in this case will be
# a file called NC_001346/NC_001346.ref.cmcalibrate: 
# 
> cat NC_001346/NC_001346.ref.cmcalibrate 
# cmcalibrate :: fit exponential tails for CM E-values
# INFERNAL 1.1.1 (July 2014)
# Copyright (C) 2014 Howard Hughes Medical Institute.
# Freely distributed under the GNU General Public License (GPLv3).
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# CM file:                                     NC_001346/NC_001346.ref.cm
# total sequence length to search per mode:    0.04 Mb
# number of worker threads:                    4 [--cpu]
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
# Calibrating CM(s):
#
#                        predicted                                                   actual   
#                       running time              percent complete                running time
# model name            (hr:min:sec)  [........25........50........75..........]  (hr:min:sec)
# --------------------  ------------  ------------------------------------------  ------------
  NC_001346.ref.cds.1       00:01:40  [====================
#
# From the output of dnaorg_annotate_genomes.pl, the user will know
# that, in this case, 5 models will be calibrated. In this case the
# first one is predicted to take 1 minute 40 seconds to calibrate and
# it is about 50% finished. This file will continually refresh so the
# user can keep checking it.
#
# qstat is also useful:
qstat
#job-ID  prior   name       user         state submit/start at     queue                          jclass                         slots ja-task-ID 
#------------------------------------------------------------------------------------------------------------------------------------------------
#6405307 0.71290 cp.NC_0013 nawrocke     r     09/24/2015 11:20:39 unified@sge633.be-md.ncbi.nlm.                                    4        
# 
# But it only reports if the file is still running or not. When
# 'qstat' returns nothing it means that the calibration job is finished.
# 
# This job takes about 25 minutes to finish.
# You can tell if it successfully finished by the final line of the
# output file:
tail -n1 NC_001346/NC_001346.ref.cmcalibrate 
#[ok]
# 
# It should be "[ok]".
#
# Once the calibration is finished we can move onto STEP 2.
# 
# -----------------------------------
# STEP 2. Run dnaorg_annotate_genomes.pl with the 
#         -model and -skipfetch options to skip the
#         model building and genome fetching steps
#         and to proceed with annotating the genomes.
#
# The -model option specifies that you have previously run
# dnaorg_annotate_genomes.pl for the same dataset (same output
# directory from dnaorg_virus_wrapper.pl (e.g. NC_001346/) and
# accession list file (e.g. NC_001346.ntlist)) with the -onlybuild
# option to build and calibrate the necessary models for annotation.
#
# The -skipfetch option specifies the same you've previously run
# dnaorg_annotate_genomes.pl on this dataset, and so the script does
# not need to refetch the genome sequence files, which can be a slow
# step if there are many.
#
perl dnaorg_annotate_genomes.pl -skipfetch -model NC_001346/NC_001346.ref.cm -c NC_001346 NC_001346.ntlist
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## dnaorg_annotate_genomes.pl: Annotate genomes based on a reference and homology search
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## command: dnaorg_annotate_genomes.pl -model NC_001346/NC_001346.ref.cm -skipfetch  NC_001346 NC_001346.ntlist
## date:    Thu Sep 24 13:51:50 2015
## option:  use model in NC_001346/NC_001346.ref.cm instead of building one here [-model]
## option:  use existing fetched genome file, don't create a new one [-skipfetch]
##
## Skipping genome fetch step                                      ... done. [-skipfetch]
## Fetching reference CDS sequences                                ... done. [0.1 seconds]
## Running cmscan                                                  ... done. [53.6 seconds]
## Fetching predicted exon sequences                               ... done. [0.0 seconds]
## Combining multi-exon predicted CDS                              ... done. [0.0 seconds]
## Translating predicted CDS to identify internal starts/stops     ... done. [0.0 seconds]
## Fetching corrected exon sequences                               ... done. [0.0 seconds]
## Combining multi-exon corrected CDS                              ... done. [0.0 seconds]
## Creating multiple alignments                                    ... done. [1.6 seconds]
##                                         CDS #1 [single exon; +]                        CDS #2 [single exon; +]                                        CDS #3 [2 exons; -]                                        CDS #4 [single exon; -]                                                              
##                                            movement protein                                capsid protein                                        replication-associated protein                               replication-associated protein A                      existing annotation              
##                             ---------------------------------------------  ---------------------------------------------  --------------------------------------------------------------------------  ---------------------------------------------                 -------------------              
## accession           totlen    start1    stop1  fid1 md1 length SS3 stp PF    start1    stop1  fid1 md1 length SS3 stp PF    start1    stop1  fid1 md1    start2    stop2  fid2 md2 length SS3 stp PF    start1    stop1  fid1 md1 length SS3 stp PF  totlen  avgid    cds  exons  match             overlaps?  result      
##-------------------  ------  -------- -------- ----- --- ------ --- --- --  -------- -------- ----- --- ------ --- --- --  -------- -------- ----- ---  -------- -------- ----- --- ------ --- --- --  -------- -------- ----- --- ------ --- --- --  ------  -----  -----  -----  -----  --------------------  ------------
#NC_001346               2689     150      455  1.000  ..    306 ... TAA  P      466     1200  1.000  ..    735 ... TAA  P     2527     1886  1.000  ..     1793     1353  1.000  ..   1083 ... TGA  P     2527     1709  1.000  ..    819 ... TAG  P    2689  1.000      4      5     10   P 2 3.1/4.1 3.2/4.1  PASS PPPPP
#KJ699341                2689       1      306  1.000  ..    306 ... TAA  P      317     1051  0.992  ..    735 ... TAA  P     2378     1737  0.992  ..     1644     1204  0.991  ..   1083 ... TGA  P     2378     1560  0.993  ..    819 ... TAG  P    2689  0.994      4      5     10   P 2 3.1/4.1 3.2/4.1  PASS PPPPP
#KJ437659                2689       1      306  0.993  ..    306 ... TAA  P      317     1051  0.993  ..    735 ... TAA  P     2378     1737  0.991  ..     1644     1204  0.973  ..   1083 ... TGA  P     2378     1560  0.980  ..    819 ... TAG  P    2689  0.986      4      5     10   P 2 3.1/4.1 3.2/4.1  PASS PPPPP
#HQ693446                2690       1      306  0.974  ..    306 ... TAA  P      317     1051  0.971  ..    735 ... TAA  P     2379    [1738] 0.988  ..    [1645]   [1220] 0.974  .c   1068 ... TAA  P     2379     1561  0.987  ..    819 ... TAG  P    2690  0.979      3      3      7   P 2 3.1/4.1 3.2/4.1  PASS PPPPP
#HQ693435                2690       1      306  0.980  ..    306 ... TAA  P      317     1051  0.971  ..    735 ... TAA  P     2379    [1738] 0.984  ..    [1645]   [1220] 0.974  .c   1068 ... TAA  P     2379     1561  0.984  ..    819 ... TAG  P    2690  0.979      3      3      7   P 2 3.1/4.1 3.2/4.1  PASS PPPPP
##
## Explanations of column headings (in left to right order):
## "accession":                        GenBank accession for genomic sequence
## "totlen":                           total length (nt) for accession
##
## "CDS #<i>: start<j>":               start position of exon #<j> of CDS #<i>enclosed in brackets "[]" if different from all exon starts in existing annotation
## "CDS #<i>: stop<j>":                stop  position of exon #<j> of CDS #<i>enclosed in brackets "[]" if different from all exon starts in existing annotation
## "CDS #<i>: fid<j>":                 fractional identity between exon #<j> of CDS #<i> and reference genome
## "CDS #<i>: md<j>":                  annotation indicating if alignment to reference extends to 5' and 3' end of reference exon.
##                                     first character pertains to 5' end and second character pertains to 3' end.
##                                     possible values for each of the two characters:
##                                       ".":   alignment extends to boundary of reference
##                                       "<d>": alignment truncates <d> nucleotides short of boundary of reference (1 <= <d> <= 9)
##                                       "+":   alignment truncates >= 10 nucleotides short of boundary of reference
## "CDS #<i>: length":                 length of CDS #<i> (all exons summed)
##
## "CDS #<i>: SS3":                    annotation indicating if predicted CDS has a valid start codon, stop codon and is a multiple of 3
##                                     first  character: '.' if predicted CDS has a valid start codon, else '!'
##                                     second character: '.' if predicted CDS has a valid stop  codon, else '!'
##                                     third  character: '.' if predicted CDS has a length which is a multiple of three, else '!'
## "CDS #<i>: stp":                    the predicted stop codon for this CDS
## "CDS #<i>: PF":                     annotation indicating if this exon PASSED ('P') or FAILED ('F')
##                                       a CDS PASSES ('P') if and only if ALL of its exons have a valid start codon,
##                                       a valid stop codon, are lengths that are a multiple of 3, and have an
##                                       alignment to the corresponding reference exon that extends to the 5'
##                                       and 3' boundary of the reference annotation.
##                                       If >= 1 of these conditions is not met then the CDS FAILS ('F').
##
## "totlen":                           total length (nt) for accession (repeated for convenience)
##
## "existing annotation: cds"          number of CDS in the existing NCBI annotation for this accession
## "existing annotation: exons"        total number of exons in the existing NCBI annotation for this accession
## "existing annotation: match"        number of exons in existing NCBI annotation for which existing and predicted annotation agree exactly
##
## "overlaps?"                         text describing which (if any) of the predicted exons overlap with each other
##                                     first character:   'P' for PASS if predicted annotation for this accession has same overlaps as the reference
##                                                        'F' for FAIL if it does not
##                                     second character:  number of overlaps between any two exons
##                                     remainder of line: text explaining which exons overlap
##                                       e.g.: "3.2/4.1" indicates exon #2 of CDS #3 overlaps with exon #1 of CDS #4 on either strand
##
## "result":                           "PASS" or "FAIL". "PASS" if and only if all tests for this accession PASSED ('P')
##                                     as indicated in the "PF" columns. Followed by the individual P/F results in order.
## 

# The output of the script gives a brief explanation of the steps being
# taken.
# 
# From above: 
#
## Skipping genome fetch step                                      ... done. [-skipfetch]
## Fetching reference CDS sequences                                ... done. [0.1 seconds]
## Running cmscan                                                  ... done. [53.6 seconds]
## Fetching predicted exon sequences                               ... done. [0.0 seconds]
## Combining multi-exon predicted CDS                              ... done. [0.0 seconds]
## Translating predicted CDS to identify internal starts/stops     ... done. [0.0 seconds]
## Fetching corrected exon sequences                               ... done. [0.0 seconds]
## Combining multi-exon corrected CDS                              ... done. [0.0 seconds]
## Creating multiple alignments                                    ... done. [1.6 seconds]
#
# Briefly, the script fetches all exons from the reference accession
# and stores information on them internally. It then skips the model 
# building step because we used the -model option. The next step is to
# run cmscan using the models built from the reference exons to
# identify (suspected) homologous exons in all other accessions. This
# is done with one call to 'cmscan'. In this run it is the rate
# limiting step.
#
# After that, the cmscan output is parsed and the predicted exon
# boundaries for each accession are used to fetch out the predicted
# exon sequences. Multiple exon CDS are then combined into a single
# CDS sequence. These sequences are then translated using the
# 'esl-translate' program and the output of that program is used to
# determine if there are in-frame start or stop codons within each
# predicted CDS. This provides new 'corrected' annotations for many
# sequences. The new annotations are used to fetch corrected exon
# sequences and exons from multi-exon CDS are combined. These
# CDS are then translated into predicted protein sequences.
# 
# Finally, the exon sequences are aligned to their (presumed)
# homologous reference CDS sequences to create a multiple alignment
# of all exon sequences.
#
# After this a table is output that includes information on the
# coordinates of the annotations as well as additional
# information. The section titled "Explanations of column headings"
# above provides more information on the tabular data.
#
##############
# Output files
##############
#
# The script creates a number of output files in the directory
# specified on the command line (NC_001346/ in this case).
#
# These output files include (I'll use the specific name of the files
# here, but they will vary if the name of directory specific on the
# command line changes from 'NC_001346'):
# 
# NC_001346.tblout: cmscan tabular output 
#
# NC_001346.stdout: cmscan standard output 
#
# NC_001346.predicted.cds.<n>.fa: nucleotide sequences for predicted
#   CDS number <n>, these pertain to coordinates before the
#   'correction' step of identifying internal start/stops.
#
# NC_001346.predicted.cds.<n>.exon.<o>.fa: nucleotide sequences for
#   predicted CDS number <n>, exon number <o>. these pertain to
#   coordinates before the 'correction' step. These will only exist
#   for multi-exon CDS.
# 
# NC_001346.corrected.cds.<n>.fa: nucleotide sequences for corrected
#   CDS number <n>. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
#
# NC_001346.corrected.cds.<n>.exon.<o>.fa: nucleotide sequences for corrected
#   CDS number <n>, exon number <o>. These will only exist for
#   multi-exon CDS. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
#
# NC_001346.corrected.aa.full.<n>.fa: translated protein sequences for
#   the CDS in NC_001346.corrected.cds.<n>.fa.
#
# NC_001346.corrected.cds.<n>.stk: multiple alignment of the sequences
#   in NC_001346.corrected.cds.<n>.fa. Created by cmalign by
#   essentially aligning each individual exon to the reference exon.
#
# NC_001346.corrected.cds.<n>.exon.<o>.stk: multiple alignment of the
#   sequences in NC_001346.corrected.cds.<n>.exon.<o>.fa. Created by
#   cmalign by essentially aligning each individual exon to the
#   reference exon.
#
# NC_001346.corrected.cds.<n>.exon.<o>.fa: nucleotide sequences for corrected
#   CDS number <n>, exon number <o>. These will only exist for
#   multi-exon CDS. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
# 
# NC_001346.gap.perseq-all.txt: list of all gaps in all alignments of
#   the exons. Organized per-sequence (each row is a sequence).
#
# NC_001346.gap.perseq-not3.txt: list of all gaps that are not a
#   multiple of 3 in all alignments of the exons. Organized
#   per-sequence.
#
# NC_001346.gap.perseq-special.txt: list of all gaps that are
#   'special' in that they can explain why a CDS is not a multiple of
#   length 3 (see the comments in this file for a more precise
#   definition). Organized per-sequence.
#
# NC_001346.gap.pergap-all.txt: list of counts of all gaps, organized
#   per gap (each line is a different gap).
#
# NC_001346.gap.pergap-not3.txt: list of counts of all gaps that are
#   not a multiple of 3, organized per gap (each line is a different
#   gap).
#
# NC_001346.gap.pergap-special.txt: list of counts of all 'special'
#   gaps, organized per gap (each line is a different gap).
#
##################################################
## Naming convention for sequences in fasta files
##################################################
##
## Single exon nucleotide sequences are named <s>/<d1>-<d2>: 
## Where <s> is the sequence accession, <d1> is the coordinate of the
## start, and <d2> is the coordinate of the stop. 
##
## For example:
## NC_001346/150-455
##
## Multi-exon nucleotide sequences of <m> exons are similarly named,
## but contain <m> sets of <d1>-<d2>, one per exon separated by a
## single ','.
## 
## For example:
## NC_001346/2527-1886,1793-1353
## 
##
## Protein sequences are similarly named with the coordinates
## pertaining to nucleotide coordinates the protein was translated
## from. Additionally, the string "-translated" is appended to the
## name. 
##
## For the two examples above:
## NC_001346/150-455-translated
## NC_001346/2527-1886,1793-1353-translated
## 
## 
-----------------------------------
TODOs:

- fetching the genomes is somewhat wasteful given that if we ran
  dnaorg_virus_wrapper.pl as a pre-step we already have them, albeit
  split into class specific files. There's definitely an opportunity
  for optimization here by skipping the idfetch step.

- with -ccluster allow each calibration to occur separately, so they
  finish faster.

#############################################
# Last updated: EPN, Fri May 29 14:42:39 2015
#############################################
#
# This directory is under git control. Use
# git commands to see revision history.
#
############################################
