# EPN, Thu Mar 17 14:30:57 2016
# pwd: /panfs/pan1/dnaorg/programs/15_0924_dnaorg_annotate_genomes
# git repository url: https://github.com/nawrockie/dnaorg_scripts.git
#
# The dnaorg_build.pl and dnaorg_annotate.pl executable scripts are in
# this directory. See the 'Prerequisites' section of this file before
# trying to run them.
#
# This file gives examples of using the dnaorg scripts dnaorg_build.pl and
# dnaorg_annotate.pl to annotate viral genomes of species S given a
# single reference GenBank entry for S.  In this context, the meaning
# of "reference" sequence is that it has all the annotations expected
# and for circular genomes that position 1 is consistent with the
# accepted convention about where the origin should be. If there are
# multiple reference sequences for S, one runs dnaorg_build.pl and
# dnaorg_annotate.pl separately for each reference sequence. In some places,
# the technical term "RefSeq" is used instead of the less formal
# "reference sequence. 
# The overarching objectives of *dnaorg*.pl are to compute all information
# needed to produce annotations and to output that information via
# tables and FASTA files;
#
# The dnaorg scripts do not produce an updated GenBank flat file.
#
###########
#
# The meaning of line prefixes in this file is:
# '#':    a comment line (text written just for this file).
# "##":   line output from a command
# "###":  line output from a command, with a '#' as the first char of
#         the output
# "####": 4 or more '#' are dividing lines used to help organize the
#         file
# "":     a command to use when learning about this file
#
###########
#
# The dnaorg scripts are wrapper Perl scripts that call
# other programs, including those housed/described in the following
# directories:
#
# esl-fetch-cds.pl:      /panfs/pan1/dnaorg/programs/15_0324_esl_fetch_cds/
# esl-epn-translate.pl:  /panfs/pan1/dnaorg/programs/16_0317_esl_epn_translate/
#
# Other executables called by the dnaorg scripts, which (currently) have
# hard-coded paths in the script come from the packages Infernal, HMMER, and Bio-Easel.
# 
# Directories where these scripts are:
# $INFERNAL_DIR="/usr/local/infernal/1.1.1/bin/";
# $HMMER_DIR="/usr/local/hmmer/3.1/bin/";
# $BIOEASEL_DIR="/panfs/pan1/dnaorg/programs/Bio-Easel/scripts/";
#
# Infernal (v1.1.1) programs used are:
# cmalign
# cmbuild
# cmfetch
# cmpress
# cmscan 
#
# HMMER (v3.1) programs used are:
# hmmbuild
# hmmalign
# 
# Bio-Easel (no version yet!) scripts used are:
# esl-ssplit.pl
#
#
# The dnaorg scripts are Perl scripts that use the Bio-Easel
# library, which in turn uses Inline C to interact and call functions from the
# Easel sequence analysis library from Sean Eddy's group.
#
#######################
# More information
#######################
#
# For more information, see the 00NOTES.* files in the above listed
# '/panfs/pan1/dnaorg/programs/' directories, where available.
#
# For more information on the .ntlist files used as input to this script 
# see the bottom of the file:
# /panfs/pan1/dnaorg/programs/15_0529_dnaorg_virus_wrapper/00NOTES.txt.
#
# Also, see voluminous notes on development and testing of the *dnaorg* scripts in
#
# /home/nawrocke/notebook/15_0810_dnaorg_virus_annotate/00LOG.txt 
# /home/nawrocke/notebook/16_0201_dnaorg_annotate_genomes_documentation/00LOG.txt
# /home/nawrocke/notebook/15_0909_dnaorg_virus_dengue_annotate/00LOG.txt
# /panfs/pan1/dnaorg/notebook/15_1113_dnaorg_virus_error_codes/00LOG.txt
# /home/nawrocke/notebook/16_0201_dnaorg_annotate_genomes_documentation/00LOG.txt
#
# Also, github has revision history
# (https://github.com/nawrockie/dnaorg_annotate_genomes.pl.git)
#
# The NCBI JIRA tickets VIV-254 and VIV-272 may also be relevant.
# Both tickets contain (pointers to) sample annotations. VIV-254 is more focused on
# what bioinformatics problems to solve, the genomics of specific
# viruses, and discussion of what makes an annotation correct and
# complete. VIV-272 is about engineering the output of
# dnaorg_annotate_genomes.pl, so that this output is unambiguously
# suitable as input to other software tools in process of being written
# by members of J. Rodney Brister's group in NCBI/IEB.
# 
# For more information on the error codes, see the file
# /panfs/pan1/dnaorg/virseqannot/error_code_documentation/errorcodes.v5.documentation.txt 
#
#######################
# Prerequisites
#######################
# 
# Directories that include the BioEasel perl modules must be part of the user's
# $PERL5LIB environment variable in order the dnaorg scripts to work.
# 
# For bash shell users
source /panfs/pan1/dnaorg/programs/setup-dnaorg-scripts.bash.sh
#
# For C shell or C shell compatible users
source /panfs/pan1/dnaorg/programs/setup-dnaorg-scripts.csh.sh
#
######################################
# Usage and options of dnaorg_build.pl
######################################
#
# The output of each program run with the '-h' option
# is informative about how to use that script:
# 
# dnaorg_build.pl takes a single argument: the reference 
# accession:
#
perl dnaorg_build.pl -h
## dnaorg_build.pl :: build homology models for features of a reference sequence
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 14:55:25 2016
##
#Usage: dnaorg_build.pl [-options] <reference accession>
#
#basic options:
#  -c            : genome is circular
#  -d <s>        : specify output directory is <s1> (created with dnaorg_build.pl -d <s>), not <ref accession>
#  -f            : force; if dir <reference accession> exists, overwrite it
#  -v            : be verbose; output commands to stdout as they're run
#  --matpept <s> : read mat_peptide info in addition to CDS info, file <s> explains CDS:mat_peptide relationships
#  --nomatpept   : ignore mat_peptide information in reference annotation
#  --keep        : do not remove intermediate files, keep them all on disk
#
#options affecting window/hit definition:
#  --slow  : use default cmcalibrate parameters, not parameters optimized for speed
#  --local : run cmcalibrate locally, do not submit calibration jobs for each CM to the compute farm
#
#optional output files:
#  --mdlinfo : create file with internal model information
#  --ftrinfo : create file with internal feature information
#
#options for skipping stages and use files from earlier, identical run, primarily useful for debugging:
#  --skipedirect : skip the edirect steps, use data from an earlier run of the script
#  --skipfetch   : skip the sequence fetching steps, use files from an earlier run of the script
#
######
#
# dnaorg_annotate.pl should be run after dnaorg_build.pl is finished
# and all of the cmcalibrate jobs it has submitted have completed
# running on the farm (TODO: have dnaorg_build.pl wait for
# calibrations to finish before exiting.) 
#
# dnaorg_annotate.pl is run with a single command line argument,
# a .ntlist file that contains a list of accessions, one per line.
# These accessions should be the same species as the reference
# accession used in dnaorg_build.pl. The reference accession used
# passed into dnaorg_build.pl should be the first accession listed 
# in the .ntlist file.
#
# See the example runs below for more detailed instructions.
# 
perl dnaorg_annotate.pl -h
## dnaorg_annotate.pl :: annotate sequences based on a reference annotation
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 14:56:55 2016
##
#Usage: dnaorg_annotate.pl [-options] <file with list of accessions to annotate>
#
#basic options:
#  -c              : genome is circular
#  -d <s>          : specify output directory is <s1> (created with dnaorg_build.pl -d <s>), not <ref accession>
#  -v              : be verbose; output commands to stdout as they're run
#  --origin <s>    : identify origin seq <s> in genomes, put "|" at site of origin ("|" must be escaped, i.e. "\|"
#  --matpept <s>   : read mat_peptide info in addition to CDS info, file <s> explains CDS:mat_peptide relationships
#  --nomatpept     : ignore mat_peptide information in reference annotation
#  --specstart <s> : read specified alternate start codons per CDS from file <s>
#  --keep          : do not remove intermediate files, keep them all on disk
#  --model <s>     : use model file <s>
#  --local         : run cmscan locally instead of on farm
#  --nseq <n>      : set number of sequences for each cmscan farm job to <n> [5]
#  --wait <n>      : allow <n> minutes for cmscan jobs on farm to finish [100]
#
#options for skipping/adding optional stages:
#  --noalign : skip the alignment steps
#
#optional output files:
#  --mdlinfo : create file with internal model information
#  --ftrinfo : create file with internal feature information
#  --seqinfo : create file with internal sequence information
#  --errinfo : create file with internal error information
#
#options for skipping stages and use files from earlier, identical run, primarily useful for debugging:
#  --skipedirect   : skip the edirect steps, use data from an earlier run of the script
#  --skipfetch     : skip the sequence fetching steps, use files from an earlier run of the script
#  --skipscan      : skip the cmscan step, use results from an earlier run of the script
#  --skipalign     : skip the alignment steps, use results from an earlier run of the script
#  --skiptranslate : skip the translation steps, use results from an earlier run of the script
#
##############
# Example runs
##############
# 
# There are currently (March 2016) two dnaorg scripts and they are
# meant to be used in the following order:
# 
# 1) dnaorg_build.pl: build homology models for a reference accession.
#    Must be run once per reference accession.
# 
# 2) dnaorg_annotate.pl: use models built from dnaorg_build.pl to
#    annotate other genomes of the same species as the reference.
#    Can be run many times for each species provided that
#    dnaorg_build.pl has been run for that species (and reference).
# 
# The discussion below includes example runs of each of the
# two scripts in turn for two different species.
#
# When a species has multiple reference sequences, one may wish to
# partition the genomes, so that each genome is assigned to a single
# reference and hence annotated with respect to that reference. We
# have done this partitioning experimentally for Dengue virus, West
# Nile virus, and Norovirus. However, this partitioning is not
# required; it is permissible to annotate the same genome with respect
# to multiple reference sequences. This document (as of March 2016)
# does not discuss the partitioning further.  It is assumed that each
# reference sequence has associated with it a list of genomes to be
# annotated with respect to the reference sequence.  A genome may
# appear in the "to-be-annotated" lists for multiple references.
# 
# The first run is for the Maize streak virus, which has a circular
# ssDNA genome with 4 CDS that code for proteins, one of which has 2
# exons.  The second run is for Dengue (type 1) virus, which has a
# linear ssRNA genome. Dengue translates a single polyprotein that is
# cleaved in two stages into 14 smaller peptides, called "mature
# peptides". The first stage cleaves the polyprotein into 11 adjacent,
# disjoint peptides. The second stage further cleaves "sub-peptides"
# from three of the first stage peptides.  Together, the two runs on
# the two different species demonstrate most of the features and
# versatility of the dnaorg scripts.
#
####################
# Example run 1 of 2 
####################
#
# Here is an example of running the dnaorg_build.pl and
# dnaorg_annotate.pl scripts for the Maize streak virus (MSV). 
# 
#######################################
# Step 1. Run dnaorg_build.pl for MSV #
#######################################
#
# The RefSeq accession for MSV is NC_001346, so to run the
# dnaorg_build.pl script one should run:
# 
perl dnaorg_build.pl -c NC_001346
## dnaorg_build.pl :: build homology models for features of a reference sequence
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 15:15:28 2016
##
## reference accession:  NC_001346
## genome is circular:   yes [-c] 
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## Gathering information on reference using edirect             ... done. [8.4 seconds]
## Fetching and processing the reference genome                 ... done. [1.1 seconds]
## Building models and submitting calibration jobs to the farm  ... done. [34.0 seconds]
##
## When the 5 cmcalibrate jobs on the farm finish, the user can use dnaorg_annotate.pl
## to use them to annotate genomes.
##
##
## Output printed to screen saved in:                                  NC_001346.dnaorg_build.log
## List of executed commands saved in:                                 NC_001346.dnaorg_build.cmd
## List and description of all output files:                           NC_001346.dnaorg_build.list
## CM file #1, CDS#1 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.0.cm
## CM file #2, CDS#2 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.1.cm
## CM file #3, CDS#3.1 (currently calibrating on the farm) saved in:   NC_001346.dnaorg_build.2.cm
## CM file #4, CDS#3.2 (currently calibrating on the farm) saved in:   NC_001346.dnaorg_build.3.cm
## CM file #5, CDS#4 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.4.cm
##
## All output files created in directory ./NC_001346/.
##
## CPU time:  00:00:43.53
##            hh:mm:ss
## 
## DNAORG-SUCCESS
# 
################################
# 
# We use the -c option because MSV is a circular genome; more information on 
# the annotation of circular genomes is given below.
#

# The output printed to the screen is also saved to the file
# NC_001346/NC_001346.dnaorg_build.log. It explains the three main
# steps the script performs as they are being performed, and then
# outputs a list of some of the output files created by the script.
# For a complete list see NC_001346.dnaorg_build.list.
# All output files have been created in the subdirectory 'NC_001346/'.
# A particularly important file is the NC_001346.dnaorg_build.cmd
# file that includes all of the commands executed by the script during
# its execution.

# The three main steps performed by the script are:
# 1. 'Gathering information on reference using edirect'. In this step, 
#    the edirect tools (esearch, efetch, xtract, etc.) are used to
#    extract information from the NCBI databases for the reference
#    accession NC_001346. The output files ending in .ftable and
#    .length include this information.
# 
# 2. 'Fetching and processing the reference genome'. In this step, the
#    actual sequence for NC_001346 is fetched using a program called
#    esl-fetch.cds.pl, and the CDS features are extracted from this
#    sequence and saved separately to be used to create homology
#    models in step 3. The output files with the .fa and .stk suffixes
#    are created in this step.
# 
# 3. 'Building models and submitting calibration jobs to the farm'. 
#    In this step, models are built using Infernal for each of the
#    reference CDS. A 'calibration' (a simulation used to determine
#    E-value parameters for the model) is then submitted to the farm. 
#    These calibrations can take tens of minutes, which is why they
#    are not done locally, but rather in parallel on the compute farm.
#
# Importantly, the user must wait until the calibrations are finished
# before running dnaorg_annotate_genomes.pl, as explained below.
# The 'qstat' program can be used to check on the status of the
# calibration jobs. For example:
#
qstat
##job-ID  prior   name       user         state submit/start at     queue                          jclass                         slots ja-task-ID 
##------------------------------------------------------------------------------------------------------------------------------------------------
##1488898 0.83375 c.NC_00134 nawrocke     r     03/17/2016 15:16:00 unified@sge272.be-md.ncbi.nlm.                                    4        
##1488904 0.83375 c.NC_00134 nawrocke     r     03/17/2016 15:16:00 unified@sge824.be-md.ncbi.nlm.                                    4        
#
# Once there are no c.NC_00134* jobs remaining in the qstat output,
# the jobs have finished and dnaorg_annotate_genomes.pl can be run.
#
# If a job fails on the cluster (does not complete successfully), the
# easiest way to find out is by attempting the dnaorg_annotate.pl
# step. If one of the calibrations failed, then the dnaorg_annotate.pl
# step will fail as well, and inform the user that the CM files are faulty.
# If this happens, it is probably due to a transient problem with the
# compute farm. One should therefore, try to run dnaorg_build.pl again.
#
##########################################
# Step 2. Run dnaorg_annotate.pl for MSV #
##########################################
#
# Once the calibrations are finished, we can run dnaorg_annotate.pl
# to annotate other MSV genomes. For this example, we will annotate
# 5 genomes, one of which is the reference genome. These are listed 
# in NC_001346.ntlist. Take a look at that file:
#
cat NC_001346.ntlist 
#NC_001346
#KJ699341
#KJ437659
#HQ693446
#HQ693435
##
#
# It is a requirement that the first accession in the ntlist file that
# is passed into dnaorg_annotate.pl is the same accession used in 
# the dnaorg_build.pl call. In the .ntlist files, the accessions should
# be listed without versions (e.g., .1, .2). The order of accessions
# after the first row is unimportant. Each accession may only appear 
# once in the file. If an accession appears more than once
# dnaorg_annotate.pl will exit in error and inform the user which
# accession appears more than once.
#
# To run dnaorg_annotate.pl do:
#
perl dnaorg_annotate.pl -c NC_001346.ntlist 
## dnaorg_annotate.pl :: annotate sequences based on a reference annotation
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 15:25:36 2016
##
## file with list of accessions:  NC_001346.ntlist
## genome is circular:            yes [-c]        
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## Gathering information on 5 sequences using edirect                     ... done. [9.7 seconds]
## Fetching all sequences and processing the reference genome             ... done. [1.4 seconds]
## Creating CM database by concatenating individual CM files              ... done. [0.1 seconds]
## Preparing the CM database for homology search using cmpress            ... done. [0.2 seconds]
## Verifying CM database created for current reference NC_001346          ... done. [0.0 seconds]
## Running cmscan locally                                                 ... done. [25.9 seconds]
## Parsing cmscan results                                                 ... done. [0.0 seconds]
## Calculating predicted feature lengths                                  ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.0 seconds]
## Combining predicted exons into CDS                                     ... done. [0.0 seconds]
## Combining predicted mature peptides into CDS                           ... done. [0.0 seconds]
## Identifying internal starts/stops in coding sequences                  ... done. [3.2 seconds]
## Correcting homology search stop predictions                            ... done. [0.0 seconds]
## Identifying overlap and adjacency errors                               ... done. [0.0 seconds]
## Finalizing annotations and validating error combinations               ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.0 seconds]
## Combining corrected exons into CDS                                     ... done. [0.0 seconds]
## Combining corrected mature peptides into CDS                           ... done. [0.0 seconds]
## Translating corrected nucleotide features into protein sequences       ... done. [3.1 seconds]
## Aligning and parsing corrected nucleotide hits                         ... done. [1.6 seconds]
## Aligning translated protein sequences                                  ... done. [2.1 seconds]
## Generating tabular annotation output                                   ... done. [0.0 seconds]
## Generating error code output                                           ... done. [0.0 seconds]
##
## Annotated 5 accessions, 0 (0.0000 fraction) had at least one annotation 'failure', see NC_001346.dnaorg_annotate.tbl for all details.
## Table below includes counts of error codes
##
## Explanation of columns:
## "code"       : the error code
## "#tot"       : total number of occurences of code , possibly > 1 for some accessions
## "#accn"      : number of accessions with at least 1 occurence of code
## "fraction...": fraction of all 5 accessions with at least 1 occurence of code
##
## Explanation of final two rows beginning with "total" and "any":
##   "total":"#tot"   column is total number of error codes reported
##   "any":"#tot"     column is number of accessions with >= 1 error code
##   "any":"fraction" column is fraction of accessions with >= 1 error code
##code   #tot  #accn  fraction-of-all-5-accn
##----  -----  -----  ------
#  ori      0      0  0.0000
#  nop      0      0  0.0000
#  nm3      0      0  0.0000
#  bd5      0      0  0.0000
#  bd3      0      0  0.0000
#  olp      0      0  0.0000
#  str      0      0  0.0000
#  stp      0      0  0.0000
#  ajb      0      0  0.0000
#  aja      0      0  0.0000
#  trc      2      2  0.4000
#  ext      0      0  0.0000
#  ntr      0      0  0.0000
#  nst      0      0  0.0000
#  aji      0      0  0.0000
#  int      0      0  0.0000
#  inp      0      0  0.0000
##----  -----  -----  ------
#total      2      -       -
#  any      2      -  0.4000
##
## Output printed to screen saved in:                                                   NC_001346.dnaorg_annotate.log
## List of executed commands saved in:                                                  NC_001346.dnaorg_annotate.cmd
## List and description of all output files saved in:                                   NC_001346.dnaorg_annotate.list
## CM file (a concatenation of individual files created by dnaorg_build.pl) saved in:   NC_001346.dnaorg_annotate.ref.cm
## All annotations in tabular format saved in:                                          NC_001346.dnaorg_annotate.tbl
## Annotations for all sequences with >= 1 failure in tabular format saved in:          NC_001346.dnaorg_annotate.fail.tbl
## Annotations for all sequences with >= 1 error in tabular format saved in:            NC_001346.dnaorg_annotate.error.tbl
## List of errors, one line per sequence saved in:                                      NC_001346.dnaorg_annotate.peraccn.errors
## List of errors, one line per error saved in:                                         NC_001346.dnaorg_annotate.all.errors
## Summary of all errors saved in:                                                      NC_001346.dnaorg_annotate.errors.summary
##
## All output files created in directory ./NC_001346/.
##
## CPU time:  00:00:47.49
##            hh:mm:ss
## 
## DNAORG-SUCCESS
##############
#
# The dnaorg_annotate.pl output begins with a description of the many
# steps it performs, with timings of each step.
#
###########################
## CHUNK OF SCRIPT OUTPUT #
###########################
## Gathering information on 5 sequences using edirect                     ... done. [9.7 seconds]
## Fetching all sequences and processing the reference genome             ... done. [1.4 seconds]
## Creating CM database by concatenating individual CM files              ... done. [0.1 seconds]
## Preparing the CM database for homology search using cmpress            ... done. [0.2 seconds]
## Verifying CM database created for current reference NC_001346          ... done. [0.0 seconds]
## Running cmscan locally                                                 ... done. [25.9 seconds]
## Parsing cmscan results                                                 ... done. [0.0 seconds]
## Calculating predicted feature lengths                                  ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.0 seconds]
## Combining predicted exons into CDS                                     ... done. [0.0 seconds]
## Combining predicted mature peptides into CDS                           ... done. [0.0 seconds]
## Identifying internal starts/stops in coding sequences                  ... done. [3.2 seconds]
## Correcting homology search stop predictions                            ... done. [0.0 seconds]
## Identifying overlap and adjacency errors                               ... done. [0.0 seconds]
## Finalizing annotations and validating error combinations               ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.0 seconds]
## Combining corrected exons into CDS                                     ... done. [0.0 seconds]
## Combining corrected mature peptides into CDS                           ... done. [0.0 seconds]
## Translating corrected nucleotide features into protein sequences       ... done. [3.1 seconds]
## Aligning and parsing corrected nucleotide hits                         ... done. [1.6 seconds]
## Aligning translated protein sequences                                  ... done. [2.1 seconds]
## Generating tabular annotation output                                   ... done. [0.0 seconds]
## Generating error code output                                           ... done. [0.0 seconds]
##################################
## END OF CHUNK OF SCRIPT OUTPUT #
##################################
#
# The first several steps gather information about the reference
# accession, the existing annotations of all accessions, and validate
# the CM file in the NC_001346/ directory that is about to be used for
# annotation was indeed made for the current reference sequence.
# 
# The script then runs the Infernal 'cmscan' progarm to annotate all
# the 'features' of each of the accessions. In this case 'cmscan' was 
# run locally (on the current machine). If more than 5 sequences were
# to be annotated, the annotations would be submitted to the compute
# farm, with 5 sequences per compute job, and the script would wait
# for them all to finish before proceeding. (This magic number of '5'
# can be changed to <n> with the --nseq <n> option.)
#
# The cmscan results are then parsed and the predicted hits are
# fetched into fasta files. These sequence files are then examined for
# the validity of their start and stop codons and also to identify any
# early in-frame stop codons. The results of these examinations are
# used to 'correct' predictions where early in-frame stop codons were
# found. The 'corrected' sequences are then fetched, aligned,
# translated, and then those translations are aligned.
#
# Finally the script outputs the tabular annotation and lists of
# errors found, and outputs a summary of the annotations and errors:
#
###########################
## CHUNK OF SCRIPT OUTPUT #
###########################
## Annotated 5 accessions, 0 (0.0000 fraction) had at least one annotation 'failure', see NC_001346.dnaorg_annotate.tbl for all details.
## Table below includes counts of error codes
##
## Explanation of columns:
## "code"       : the error code
## "#tot"       : total number of occurences of code , possibly > 1 for some accessions
## "#accn"      : number of accessions with at least 1 occurence of code
## "fraction...": fraction of all 5 accessions with at least 1 occurence of code
##
## Explanation of final two rows beginning with "total" and "any":
##   "total":"#tot"   column is total number of error codes reported
##   "any":"#tot"     column is number of accessions with >= 1 error code
##   "any":"fraction" column is fraction of accessions with >= 1 error code
##code   #tot  #accn  fraction-of-all-5-accn
##----  -----  -----  ------
#  ori      0      0  0.0000
#  nop      0      0  0.0000
#  nm3      0      0  0.0000
#  bd5      0      0  0.0000
#  bd3      0      0  0.0000
#  olp      0      0  0.0000
#  str      0      0  0.0000
#  stp      0      0  0.0000
#  ajb      0      0  0.0000
#  aja      0      0  0.0000
#  trc      2      2  0.4000
#  ext      0      0  0.0000
#  ntr      0      0  0.0000
#  nst      0      0  0.0000
#  aji      0      0  0.0000
#  int      0      0  0.0000
#  inp      0      0  0.0000
##----  -----  -----  ------
#total      2      -       -
#  any      2      -  0.4000
#################################
# END OF CHUNK OF SCRIPT OUTPUT #
#################################
#
# In this case, 5 accessions were annotated, with zero 'failures'. See
# the NC_001346.dnaorg_annotate.tbl file in the NC_001346/ directory
# for the detailed annotations.
#
# The final table output summarizes the counts of each of the error
# codes. These error codes are described more in this file:
# /panfs/pan1/dnaorg/virseqannot/error_code_documentation/errorcodes.v5.documentation.txt 
#
# In this case there are only 2 trc errors. For all errors see 
# the NC_001346.dnaorg_annotate.all.errors file (one error per line)
# and the NC_001346.dnaorg_annotate.peraccn.errors (one accession per
# line) file in the NC_001346 directory.
# 
####################
# Example run 2 of 2 
####################
# 
# In this second example run of the dnaorg scripts, we will repeat the
# same steps as in the MSV example, but with the Dengue virus, which
# differs from MSV in some important biological ways. 
# 
# Dengue has a single CDS that encodes a polypeptide, which is cleaved
# in two stages into 14 distinct peptides. These peptides are
# annotated as 'mat_peptide' features in GenBank; "mat" is short for
# "mature". The dnaorg_annotate.pl script attempts to annotate each
# mature peptide independently, and then combine those annotations to
# annotate the CDS that encode the mature peptide sequences. The
# script needs a special input file to define the relationships
# between the mature peptides and the CDS for the reference
# accession. In this example, we will use the 'NC_001477.matpept.in'
# file as input to dnaorg_annotate.pl.
#
# Here is that file:
cat NC_001477.matpept.in 
## This file explains how CDS and mat_peptide annotation for NC_001477
## are related.
##
## Format of lines in this file:
## <CDS-idx> <'primary' OR 'all'> <mat_peptide-1-idx>:<mat_peptide-2-idx>:<mat_peptide-n-idx>
## 'primary' lines: these define the 'primary' peptides in order, the
##                  CDS <CDS-idx> is comprised of the peptides listed
##                  in final token, which are contiguous, start of 
##                  first mat_peptide to stop of final mat_peptide is
##                  one contiguous subsequence.
##
## 'all' lines:     these define all the peptides that are ultimately
##                  derived from CDS <CDS-idx>. It will be a superset
##                  of the primary line for this index but will
##                  additionally include mat_peptides that are
##                  secondarily cleaved from the primary mat_peptides.
##
#1 primary 1:3:6:7:8:9:10:11:12:13:14
#1 all     1:2:3:4:5:6:7:8:9:10:11:12:13:14
##################################
#
# To construct one of these files for a new species, it is necessary
# to look at the annotation of the reference genome and manually
# determine which mature peptides are encoded by each CDS, and in what
# order they are encoded. 
# 
# Another important difference with the first MSV
# example is that Dengue is not a circular genome. Therefore,
# Dengue does not have an origin sequence, so we do not use 
# the -c option for Dengue.
#
##########################################
# Step 1. Run dnaorg_build.pl for Dengue #
##########################################
#
# Here is an example run of dnaorg_build.pl for Dengue:
#
perl dnaorg_build.pl --matpept NC_001477.matpept.in NC_001477
## dnaorg_build.pl :: build homology models for features of a reference sequence
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 15:30:01 2016
##
## reference accession:                   NC_001477                       
## using pre-specified mat_peptide info:  NC_001477.matpept.in [--matpept]
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## Gathering information on reference using edirect             ... done. [8.0 seconds]
## Fetching and processing the reference genome                 ... done. [1.3 seconds]
## Building models and submitting calibration jobs to the farm  ... done. [247.8 seconds]
##
## When the 14 cmcalibrate jobs on the farm finish, one can use dnaorg_annotate.pl
## to use them to annotate genomes.
##
##
## Output printed to screen saved in:                                 NC_001477.dnaorg_build.log
## List of executed commands saved in:                                NC_001477.dnaorg_build.cmd
## List of executed commands saved in:                                NC_001477.dnaorg_build.list
## CM file #1, MP#1 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.0.cm
## CM file #2, MP#2 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.1.cm
## CM file #3, MP#3 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.2.cm
## CM file #4, MP#4 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.3.cm
## CM file #5, MP#5 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.4.cm
## CM file #6, MP#6 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.5.cm
## CM file #7, MP#7 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.6.cm
## CM file #8, MP#8 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.7.cm
## CM file #9, MP#9 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.8.cm
## CM file #10, MP#10 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.9.cm
## CM file #11, MP#11 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.10.cm
## CM file #12, MP#12 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.11.cm
## CM file #13, MP#13 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.12.cm
## CM file #14, MP#14 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.13.cm
##
## All output files created in directory ./NC_001477/.
##
## CPU time:  00:04:17.13
##            hh:mm:ss
## 
## DNAORG-SUCCESS
#################
#
# In this case, there were 14 CMs that were built and are calibrating.
# 
#############################################
# Step 2. Run dnaorg_annotate.pl for Dengue #
#############################################
#
# When these 14 calibration jobs have finished, we can run
# dnaorg_annotate.pl. This time we will run the script on only the 3
# sequences in NC_001477.ntlist, but we will force the cmscan jobs to
# run on the compute farm with the --nseq 1 option. With this option,
# we will submit 3 cmscan jobs to the farm, one per sequence to
# annotate.  We again have to use the --matpept option.
# 
perl dnaorg_annotate.pl --nseq 1 --matpept NC_001477.matpept.in NC_001477.ntlist 
## dnaorg_annotate.pl :: annotate sequences based on a reference annotation
## dnaorg 0.1 (Feb 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## date:    Thu Mar 17 16:04:26 2016
##
## file with list of accessions:                  NC_001477.ntlist                
## using pre-specified mat_peptide info:          NC_001477.matpept.in [--matpept]
## number of sequences for each cmscan farm job:  1 [--nseq]                      
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## Gathering information on 3 sequences using edirect                     ... done. [9.2 seconds]
## Fetching all sequences and processing the reference genome             ... done. [1.8 seconds]
## Creating CM database by concatenating individual CM files              ... done. [0.7 seconds]
## Submitting 3 cmscan jobs to the farm                                   ... done. [0.2 seconds]
## Waiting a maximum of 100 minutes for all farm jobs to finish           ... done. [60.1 seconds]
## Parsing cmscan results                                                 ... done. [0.0 seconds]
## Calculating predicted feature lengths                                  ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.1 seconds]
## Combining predicted exons into CDS                                     ... done. [0.0 seconds]
## Combining predicted mature peptides into CDS                           ... done. [0.2 seconds]
## Identifying internal starts/stops in coding sequences                  ... done. [14.6 seconds]
## Correcting homology search stop predictions                            ... done. [0.0 seconds]
## Identifying overlap and adjacency errors                               ... done. [0.0 seconds]
## Finalizing annotations and validating error combinations               ... done. [0.0 seconds]
## Fetching cmscan predicted hits into fasta files                        ... done. [0.1 seconds]
## Combining corrected exons into CDS                                     ... done. [0.0 seconds]
## Combining corrected mature peptides into CDS                           ... done. [0.2 seconds]
## Translating corrected nucleotide features into protein sequences       ... done. [15.6 seconds]
## Aligning and parsing corrected nucleotide hits                         ... done. [7.1 seconds]
## Aligning translated protein sequences                                  ... done. [14.2 seconds]
## Generating tabular annotation output                                   ... done. [0.0 seconds]
## Generating error code output                                           ... done. [0.0 seconds]
##
## Annotated 3 accessions, 0 (0.0000 fraction) had at least one annotation 'failure', see NC_001477.dnaorg_annotate.tbl for all details.
## Table below includes counts of error codes
##
## Explanation of columns:
## "code"       : the error code
## "#tot"       : total number of occurences of code , possibly > 1 for some accessions
## "#accn"      : number of accessions with at least 1 occurence of code
## "fraction...": fraction of all 3 accessions with at least 1 occurence of code
##
## Explanation of final two rows beginning with "total" and "any":
##   "total":"#tot"   column is total number of error codes reported
##   "any":"#tot"     column is number of accessions with >= 1 error code
##   "any":"fraction" column is fraction of accessions with >= 1 error code
##code   #tot  #accn  fraction-of-all-3-accn
##----  -----  -----  ------
#  ori      0      0  0.0000
#  nop      0      0  0.0000
#  nm3      0      0  0.0000
#  bd5      0      0  0.0000
#  bd3      0      0  0.0000
#  olp      0      0  0.0000
#  str      0      0  0.0000
#  stp      0      0  0.0000
#  ajb      0      0  0.0000
#  aja      0      0  0.0000
#  trc      0      0  0.0000
#  ext      0      0  0.0000
#  ntr      0      0  0.0000
#  nst      0      0  0.0000
#  aji      0      0  0.0000
#  int      0      0  0.0000
#  inp      0      0  0.0000
##----  -----  -----  ------
#total      0      -       -
#  any      0      -  0.0000
##
## Output printed to screen saved in:                                            NC_001477.dnaorg_annotate.log
## List of executed commands saved in:                                           NC_001477.dnaorg_annotate.cmd
## List and description of all output files saved in:                            NC_001477.dnaorg_annotate.list
## All annotations in tabular format saved in:                                   NC_001477.dnaorg_annotate.tbl
## Annotations for all sequences with >= 1 failure in tabular format saved in:   NC_001477.dnaorg_annotate.fail.tbl
## Annotations for all sequences with >= 1 error in tabular format saved in:     NC_001477.dnaorg_annotate.error.tbl
## List of errors, one line per sequence saved in:                               NC_001477.dnaorg_annotate.peraccn.errors
## List of errors, one line per error saved in:                                  NC_001477.dnaorg_annotate.all.errors
## Summary of all errors saved in:                                               NC_001477.dnaorg_annotate.errors.summary
##
## All output files created in directory ./NC_001477/.
##
## CPU time:  00:02:04.36
##            hh:mm:ss
## 
## DNAORG-SUCCESS
####################################
# 
# The output is very similar to the output for MSV. In this case, no
# failures or errors were found. See the NC_001477.dnaorg_annotate.tbl
# for annotations. NC_001477.dnaorg_annotate.all.errors and 
# NC_001477.dnaorg_annotate.peraccn.errors would contain error
# information if there had been any errors.
# 
##############
# Output files
##############
#
# TODO: write this section
# 
##############################################################
## Reproducibility and order-dependence of list of accessions
##############################################################
# 
# The results of the script are completely reproducible if the
# following two criteria are met:
# 
# 1) the same reference accession is listed as the first accession
# 2) none of the accessions have changed annotation, i.e. no versions
#    have changed for any of the accessions.
# 
# Restriction (2) is a limitation and a TODO below is to have the
# script record not just accessions but versions as well, so the user
# will know when a version has changed.
#
# The calibration step includes a simulation that does use random
# numbers, but this does not threaten reproducibility because in the
# present usage, there is a single seed to the random number
# generator and the seed is assigned deterministically.
# 
#################################################
# Naming convention for sequences in fasta files
#################################################
#
# Single exon nucleotide sequences are named <s>/<d1>-<d2>: 
# Where <s> is the sequence accession, <d1> is the coordinate of the
# start, and <d2> is the coordinate of the stop. 
#
# For example:
# NC_001346/150-455
#
# Multi-exon nucleotide sequences of <m> exons are similarly named,
# but contain <m> sets of <d1>-<d2>, one per exon separated by a
# single ','.
# 
# For example:
# NC_001346/2527-1886,1793-1353
# 
# Protein sequences are similarly named with the coordinates
# pertaining to nucleotide coordinates the protein was translated
# from. Additionally, the string "-translated" is appended to the
# name. 
#
# For the two examples above:
# NC_001346/150-455-translated
# NC_001346/2527-1886,1793-1353-translated
# 
########################################################
# TODOS

- add version to accessions, and check that they are up-to-date somehow
  at beginning of run

- add section to this file explaining gap notation and gap info files

#############################################
# Last updated: EPN, Thu Apr 14 14:35:58 2016
#############################################
#
# This directory is under git control. Use
# git commands to see revision history.
#
############################################
