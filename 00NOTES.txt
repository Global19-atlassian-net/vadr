# EPN, Tue Feb 16 15:27:16 2016
# pwd: /panfs/pan1/dnaorg/programs/15_0924_dnaorg_annotate_genomes
# git repository url: https://github.com/nawrockie/dnaorg_annotate_genomes.pl.git
#
# Example of using the dnaorg scripts dnaorg_build.pl and
# dnaorg_annotate_genomes.pl (NOT YET FINISHED) to annotate viral
# genomes of species S given a single reference GenBank entry for S.
# In this context, the meaning of "reference" sequence is that it has
# all the annotations expected and for circular genomes that position
# 1 is consistent with the accepted convention about where the origin
# should be. The overarching objectives of *dnaorg*.pl
# are to compute all information needed to produce annotations and to
# output that information via tables and FASTA files; 
# 
# The dnaorg scripts do not produce an updated GenBank flat file.
#
# This 00NOTES.txt file also includes an example of running the 
# summarize_dnaorg_annotate_genomes.pl (NOT YET FINISHED) to summarize output from
# dnaorg_annotate_genomes.pl. See the 'Ancillary script: summarize_dnaorg_annotate_genomes.pl'
# section.
#
###########
#
# Regarding line prefixes in this file:
# '#':    a comment line (text written just for this file).
# "##":   line output from a command
# "###":  line output from a command, with a '#' as the first char of
#         the output
# "####": 4 or more '#' are dividing lines used to help organize the
#         file
# "":     a command to use when learning about this file
#
###########
#
# The dnaorg scripts are wrapper Perl scripts that call
# other programs, including those housed/described in the following
# directories:
#
# esl-fetch-cds.pl: /panfs/pan1/dnaorg/programs/15_0324_esl_fetch_cds/
# 
# Other executables called by the dnaorg scripst, which (currently) have
# hard-coded paths in the script:
# 
# program        package          url
# cmalign        Infernal v1.1.1  http://infernal.janelia.org/
# cmbuild        Infernal v1.1.1  http://infernal.janelia.org/
# cmfetch        Infernal v1.1.1  http://infernal.janelia.org/
# cmpress        Infernal v1.1.1  http://infernal.janelia.org/
# cmscan         Infernal v1.1.1  http://infernal.janelia.org/
# hmmalign       HMMER v3.1b2     hmmer.org
# hmmbuild       HMMER v3.1b2     hmmer.org
# hmmfetch       HMMER v3.1b2     hmmer.org
# hmmpress       HMMER v3.1b2     hmmer.org
# nhmmscan       HMMER v3.1b2     hmmer.org
# esl-epn-translate  Bio-Easel            GitHub: https://github.com/EddyRivasLab/easel.git
QUESTION: Why is esl-translated still needed since you wrote your own translation module?
# esl-ssplit     Bio-Easel        SVN:    https://xfamsvn.ebi.ac.uk/svn/code
QUESTION: Do the two esl programs have version numbers?

#
#
# The dnaorg scripts are Perl scripts that use the Bio-Easel
# library which uses Inline C to interact and call functions from the
# Easel sequence analysis library from Sean Eddy's group.
#
#######################
# More information
#######################
#
# For more information, see the 00NOTES.* files in the above listed
# 'dnaorg/programs/' directories, where available.
#
# For more information on the .ntlist files used as input to this script 
# see the bottom of the file:
# /panfs/pan1/dnaorg/programs/15_0529_dnaorg_virus_wrapper/00NOTES.txt.
#
# Also, see voluminous notes on development of this script in
# /home/nawrocke/notebook/15_0810_dnaorg_virus_annotate/00LOG.txt and
# /home/nawrocke/notebook/16_0201_dnaorg_annotate_genomes_documentation/00LOG.txt
# and in 
# /home/nawrocke/notebook/15_0909_dnaorg_virus_dengue_annotate/
# for notes on development and testing of these programs and several of 
# the scripts they call.
#
# The NCBI JIRA tickets VIV-254 and VIV-272 may also be relevant.
# Both tickets contain (pointers to) sample annotations. VIV-254 is more focused on
# what bioinformatics problems to solve, the genomics of specific
# viruses, and discussion of what makes an annotation correct and
# complete. VIV-272 is about engineering the output of
# dnaorg_annotate_genomes.pl, so that this output is unambiguously
# suitable as input to other software tools in process of being written
# by members of J. Rodeny Brister's group in NCBI/IEB.
# 
#######################
# Prerequisites
#######################
# 
# Directories that include the BioEasel perl modules must be part of the user's
# $PERL5LIB environment variable in order for esl-fetch-cds.pl to work.
# 
# For bash shell users
source /panfs/pan1/dnaorg/programs/setup-bio-easel.bash.sh
# For C shell or C shell compatible users
source /panfs/pan1/dnaorg/programs/setup-bio-easel.csh.sh
#
# (THESE PREREQUISITES ARE THE SAME AS THOSE NEEDED FOR 
#  dnaorg_fetch_dna_wrapper.pl)
#
######################################
# Usage and options of dnaorg_build.pl
######################################
#
# The default output is informative about how to use the script:
# 
##dnaorg_build.pl <reference accession>
QUESTION: Is it required, as suggested by the examples below that the reference accession does not include the version?
##
## This script builds homology models for sequence features
## in a reference sequence with the accession <reference accession>
##
## BASIC/COMMON OPTIONS:
##  -c           : genome is circular
##  -d <s>       : define output directory as <s>, not <reference accession>
##  -f           : force; if dir <reference accession> exists, overwrite it
##  -v           : be verbose; output commands to stdout as they're run
##  -matpept <f> : read mat_peptide info in addition to CDS info, file <f> explains CDS:mat_peptide relationships
##  -nomatpept   : ignore mat_peptide information for <reference accession> (do not model it)
##  -dirty       : do not remove intermediate files, leave them all on disk
##
## OPTIONS SPECIFIC TO INFERNAL:
##  -cslow  : use default cmcalibrate parameters, not parameters optimized for speed
##  -clocal : run cmcalibrate locally, do not submit calibration jobs for each CM to the compute farm
QUESTION: Are there any issues with the CentOS version transition on the farm?
##
#########################################
# Usage and options of dnaorg_annotate_genomes.pl
#########################################
# TODO
#########################################
# Usage and options of summarize_dnaorg_annotate_genomes.pl
#########################################
# TODO
#

##############
# Example runs
##############
# 
# There are currently (February 2016) three dnaorg scripts and they are meant to be used
# in the following order:
# 
# 1) dnaorg_build.pl: build homology models for a reference accession.
#    Must be run once per species
# 
# 2) dnaorg_annotate_genomes.pl: use models built from dnaorg_build.pl to
#    annotate other genomes of the same species as the reference.
#    Can be run many times for each species provided that
#    dnaorg_build.pl has been run for that species (and reference).
# 
# 3) summarize_dnaorg_annotate_genomes.pl: summarize output from dnaorg_annotate_genomes.pl
#    to make it easier to understand and digest. Can be run once
#    per run of dnaorg_annotate_genomes.pl, or on multiple, concatenated 
#    output files from multiple runs of dnaorg_annotate_genomes.pl.
# 
# The discussion below includes example runs of each of the
# three scripts in turn for two different species. 
# 
# The first run is for the Maize streak virus, which has a circular
# ssDNA genome with 4 CDS that code for proteins, one of which has 2
# exons.  The second run is for Dengue (type 1) virus, which has a
# linear ssRNA genome. Dengue translates a single polyprotein that is cleaved
# in two stages into 14 smaller peptides, called "mature peptides". The first
# stage cleaves the polyprotein into 11 adjacent, disjoint peptides. The second stage
# further cleaves "sub-peptides" from three of the first stage peptides.
# Together, the two runs on the two
# different species demonstrate most of the features and versatility
# of the dnaorg_annotate_genomes.pl script.
#
####################
# Example run 1 of 2 
####################
#
# Here's an example of running the dnaorg_build.pl script for the
# Maize streak virus (MSV). The RefSeq accession for MSV is NC_001346:
#
perl dnaorg_build.pl -c NC_001346
## dnaorg_build.pl :: build homology models for features of a reference sequence
## dnaorg 0.1 (February 2016)
QUESTION: Do you wish to estanblish some convention about version numbers?
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## command: dnaorg_build.pl -c  NC_001346
## date:    Tue Feb 16 15:58:05 2016
## option:  genome is circular, so features can span stop..start [-c]
##
## Gathering information on reference using edirect             ... done. [8.7 seconds]
## Fetching and processing the reference genome                 ... done. [0.9 seconds]
## Building models and submitting calibration jobs to the farm  ... done. [32.4 seconds]
##
## When the 5 cmcalibrate jobs on the farm finish, then the user can use dnaorg_annotate_genomes.pl
## to use them to annotate genomes.
##
##
## Output printed to screen saved in:                                  NC_001346.dnaorg_build.log
## List of executed commands saved in:                                 NC_001346.dnaorg_build.cmd
## Feature table obtained via edirect saved in:                        NC_001346.dnaorg_build.ftable
## Sequence length file saved in:                                      NC_001346.dnaorg_build.length
## Input file for esl-fetch-cds.pl saved in:                           NC_001346.dnaorg_build.ref.fg.idfetch.in
## Sequence file with reference genome saved in:                       NC_001346.dnaorg_build.ref.fg.fa
## Index for reference genome sequence file saved in:                  NC_001346.dnaorg_build.ref.fg.fa.ssi
## Stockholm alignment file with reference features saved in:          NC_001346.dnaorg_build.ref.all.stk
## CM file #1, CDS#1 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.0.cm
## CM file #2, CDS#2 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.1.cm
## CM file #3, CDS#3.1 (currently calibrating on the farm) saved in:   NC_001346.dnaorg_build.2.cm
## CM file #4, CDS#3.2 (currently calibrating on the farm) saved in:   NC_001346.dnaorg_build.3.cm
## CM file #5, CDS#4 (currently calibrating on the farm) saved in:     NC_001346.dnaorg_build.4.cm
##
## All output files created in directory ./NC_001346/.
##
## CPU time:  00:00:42.07
##            hh:mm:ss
## 
## DNAORG-SUCCESS
# 
################################
# 
# We use the -c option because MSV is a circular genome, more on this
# later.
#
# The output printed to the screen is also saved to the file
# testing-msv/testing-msv.dnaorg_build.log. It explains the three 
# main steps the script performs as they are being performed, and 
# then outputs a list of the output files created by the script.
# These files have all been created in the subdirectory 'testing-msv'.
# A particularly important file is the testing-msv.dnaorg_build.cmd
# file that includes all of the commands executed by the script 
# during its execution.
# 
# The three main steps performed by the script are:
# 1. 'Gathering information on reference using edirect'. In this step, 
#    the edirect tools (esearch, efetch, xtract, etc.) are used to
#    extract information from the NCBI databases for the reference
#    accession NC_001346. The output files ending in .ftable and
#    .length include this information.
# 
# 2. 'Fetching and processing the reference genome'. In this step, the
#    actual sequence for NC_001346 is fetched using a program called
#    esl-fetch.cds.pl, and the CDS features are extracted from this
#    sequence and saved separately to be used to create homology
#    models in step 3. The output files with the .fa and .stk suffixes
#    are created in this step.
# 
# 3. 'Building models and submitting calibration jobs to the farm'. 
#    In this step, models are built using Infernal for each of the
#    reference CDS. A 'calibration' (a simulation used to determine
#    E-value parameters for the model) is then submitted to the farm. 
#    These calibrations can take tens of minutes, which is why they
#    are not done locally, but rather in parallel on the compute farm.
#
# Importantly, the user must wait until the calibrations are finished
# before running dnaorg_annotate_genomes.pl, as explained below.
# The 'qstat' program can be used to check on the status of the
# calibration jobs. For example:
#
qstat
##job-ID  prior   name       user         state submit/start at     queue                          jclass                         slots ja-task-ID 
##------------------------------------------------------------------------------------------------------------------------------------------------
##6309233 1.50383 c.NC_00134 nawrocke     r     02/16/2016 15:59:25 unified@sge272.be-md.ncbi.nlm.                                    4        
##6309244 1.50383 c.NC_00134 nawrocke     r     02/16/2016 15:59:25 unified@sge818.be-md.ncbi.nlm.                                    4        
#
# Once there are no c.NC_00134* jobs remaining in the qstat output,
# the jobs have finished and dnaorg_annotate_genomes.pl can be run.
QUESTION: If jobs fail because of a problem on the farm, how can this be detected?
#
# TODO: Example of dnaorg_annotate_genomes.pl
# TODO: Example of summarize_dnaorg_annotate_genomes.pl
#
####################
# Example run 2 of 2 
####################
# 
# In this second example run of the dnaorg scripts, we will repeat the
# same steps as in the MSV example, but with the Dengue virus, which
# differs from MSV in some important biological ways. 
# Dengue has a single CDS that encodes a polypeptide which is cleaved
# into (eventually) 14 distinct peptides. These peptides are annotated
# as 'mat_peptide' features in GenBank. The dnaorg_annotate_genomes.pl
# script has a -matpept option that can be used for such species.
#
# Another important difference with the first MSV
# example is that Dengue is not a circular genome. Therefore,
# Dengue does not have an origin sequence, so we do not use 
# the -c option for Dengue.
#
# Here's an example run of dnaorg_build.pl for Dengue:
#
QUESTION: Is the command below what you intended?
perl dnaorg_build.pl -matpept NC_001477.matpept.in NC_001477
## dnaorg_build.pl :: build homology models for features of a reference sequence
## dnaorg 0.1 (February 2016)
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## command: dnaorg_build.pl -matpept NC_001477.matpept.in NC_001477
## date:    Tue Feb 16 16:12:43 2016
## option:  using mat_peptide info, CDS:mat_peptide relationships explained in NC_001477.matpept.in [-matpept]
##
## Gathering information on reference using edirect             ... done. [8.2 seconds]
## Fetching and processing the reference genome                 ... done. [1.2 seconds]
## Building models and submitting calibration jobs to the farm  ... done. [246.5 seconds]
##
## After the 14 cmcalibrate jobs on the farm finish, one can use dnaorg_annotate_genomes.pl
## to use them to annotate genomes.
##
##
## Output printed to screen saved in:                                 NC_001477.dnaorg_build.log
## List of executed commands saved in:                                NC_001477.dnaorg_build.cmd
## Mature peptide information obtained via edirect saved in:          NC_001477.dnaorg_build.mat_peptide
## Feature table obtained via edirect saved in:                       NC_001477.dnaorg_build.ftable
## Sequence length file saved in:                                     NC_001477.dnaorg_build.length
## Input file for esl-fetch-cds.pl saved in:                          NC_001477.dnaorg_build.ref.fg.idfetch.in
## Sequence file with reference genome saved in:                      NC_001477.dnaorg_build.ref.fg.fa
## Index for reference genome sequence file saved in:                 NC_001477.dnaorg_build.ref.fg.fa.ssi
## Stockholm alignment file with reference features saved in:         NC_001477.dnaorg_build.ref.all.stk
## CM file #1, MP#1 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.0.cm
## CM file #2, MP#2 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.1.cm
## CM file #3, MP#3 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.2.cm
## CM file #4, MP#4 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.3.cm
## CM file #5, MP#5 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.4.cm
## CM file #6, MP#6 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.5.cm
## CM file #7, MP#7 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.6.cm
## CM file #8, MP#8 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.7.cm
## CM file #9, MP#9 (currently calibrating on the farm) saved in:     NC_001477.dnaorg_build.8.cm
## CM file #10, MP#10 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.9.cm
## CM file #11, MP#11 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.10.cm
## CM file #12, MP#12 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.11.cm
## CM file #13, MP#13 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.12.cm
## CM file #14, MP#14 (currently calibrating on the farm) saved in:   NC_001477.dnaorg_build.13.cm
##
## All output files created in directory ./NC_001477/.
##
## CPU time:  00:04:15.90
##            hh:mm:ss
## 
## DNAORG-SUCCESS
#
##########################################
#
# The three steps performed for the script are they same as they were
# for MSV except that now, both mature peptide and CDS information is
# obtained using edirect tools and a file with the .mat_peptide suffix
# is now created. Also, the models are now built for mature peptides,
# instead of for CDS as they were in the MSV example. The lone CDS for
# Dengue will still be annotated by dnaorg_annotate_genomes.pl below, but by
# using the annotations of the mature peptides that make up the CDS,
# instead of using a single homology model of the entire CDS.
# 
# As with MSV, we need to wait until all of the calibration jobs on
# the farm have finished running before proceeding to the
# dnaorg_annotate_genomes.pl step below.
#
# TODO: Example of dnaorg_annotate_genomes.pl
# TODO: Example of summarize_dnaorg_annotate_genomes.pl
#
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
#  TEXT BELOW HERE IS UNMODIFIED FROM ORIGINAL 00NOTES.txt FILE FROM 
#  BEFORE THE CODE REORGANIZATION OF FEB 2016. THAT 00NOTES.txt FILE
#  IS SAVED AS 00NOTES-oldasof02162016.txt IN THE GIT REPO).
#  MOST OF IT IS STILL PROBABLY ACCURATE BUT I NEED TO GO OVER IT 
#  IN DETAIL WHEN dnaorg_annotate_genomes.pl and summarize_dnaorg_annotate_genomes.pl ARE
#  COMPLETED.
###########################################################################
##############
# Output files
##############
#
# The script creates a number of output files in the directory
# specified on the command line. Here, I list the output file
# created by example run #1 above, which are put in the 
# NC_001346/ directory.
#
# These output files include (I'll use the specific name of the files
# here, but they will vary if the name of directory specific on the
# command line changes from 'NC_001346'):
# 
# NC_001346.tblout: cmscan tabular output 
#
# NC_001346.stdout: cmscan standard output 
#
# NC_001346.predicted.cds.<n>.fa: nucleotide sequences for predicted
#   CDS number <n>, these pertain to coordinates before the
#   'correction' step of identifying internal start/stops.
#
# NC_001346.predicted.cds.<n>.exon.<o>.fa: nucleotide sequences for
#   predicted CDS number <n>, exon number <o>. these pertain to
#   coordinates before the 'correction' step. These will only exist
#   for multi-exon CDS.
# 
# NC_001346.corrected.cds.<n>.fa: nucleotide sequences for corrected
#   CDS number <n>. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
#
# NC_001346.corrected.cds.<n>.exon.<o>.fa: nucleotide sequences for corrected
#   CDS number <n>, exon number <o>. These will only exist for
#   multi-exon CDS. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
#
# NC_001346.corrected.aa.full.<n>.fa: translated protein sequences for
#   the CDS in NC_001346.corrected.cds.<n>.fa.
#
# NC_001346.corrected.cds.<n>.stk: multiple alignment of the sequences
#   in NC_001346.corrected.cds.<n>.fa. Created by cmalign by
#   essentially aligning each individual exon to the reference exon.
#
# NC_001346.corrected.cds.<n>.exon.<o>.stk: multiple alignment of the
#   sequences in NC_001346.corrected.cds.<n>.exon.<o>.fa. Created by
#   cmalign by essentially aligning each individual exon to the
#   reference exon.
#
# NC_001346.corrected.cds.<n>.exon.<o>.fa: nucleotide sequences for corrected
#   CDS number <n>, exon number <o>. These will only exist for
#   multi-exon CDS. For accessions with zero internal starts and stops
#   in the predicted CDS, the sequence will be the same as in the 
#   NC_001346.predicted.cds.<n>.fa file.
# 
# NC_001346.gap.perseq-all.txt: list of all gaps in all alignments of
#   the exons. Organized per-sequence (each row is a sequence).
#
# NC_001346.gap.perseq-not3.txt: list of all gaps that are not a
#   multiple of 3 in all alignments of the exons. Organized
#   per-sequence.
#
# NC_001346.gap.perseq-special.txt: list of all gaps that are
#   'special' in that they can explain why a CDS is not a multiple of
#   length 3 (see the comments in this file for a more precise
#   definition). Organized per-sequence.
#
# NC_001346.gap.pergap-all.txt: list of counts of all gaps, organized
#   per gap (each line is a different gap).
#
# NC_001346.gap.pergap-not3.txt: list of counts of all gaps that are
#   not a multiple of 3, organized per gap (each line is a different
#   gap).
#
# NC_001346.gap.pergap-special.txt: list of counts of all 'special'
#   gaps, organized per gap (each line is a different gap).
#
#
##########################
# Format of gap info files
##########################
# 
# dnaorg_annotate_genomes.pl generates 6 different gap files:
# 1. NC_001346.gap.perseq-all.txt
# 2. NC_001346.gap.perseq-not3.txt
# 3. NC_001346.gap.perseq-special.txt
# 4. NC_001346.gap.pergap-all.txt
# 5. NC_001346.gap.pergap-not3.txt
# 6. NC_001346.gap.pergap-special.txt
#
# The first 3 files include 'perseq' in the name. These are organized
# as tables with each sequence as a row. Take a look at file  1.
cat NC_001346/NC_001346.gap.perseq-all.txt 
### List of all gaps in alignment of each sequence:
###
###           CDS#1             CDS#2             CDS#3               CDS#4           
###           ================  ================  ==================  ================
###accession  tot  net  string  tot  net  string  tot  net  string    tot  net  string
###---------  ---  ---  ------  ---  ---  ------  ---  ---  --------  ---  ---  ------
##NC_001346   0    0    -       0    0    -       0    0    -         0    0    -     
##KJ699341    0    0    -       0    0    -       0    0    -         0    0    -     
##KJ437659    0    0    -       0    0    -       0    0    -         0    0    -     
##HQ693446    0    0    -       0    0    -       15   -15  D1069:15  0    0    -     
##HQ693435    0    0    -       0    0    -       15   -15  D1069:15  0    0    -     
###
### Explanation of the above table:
### The table includes information on all gaps that exist between all pairwise alignments of
### the reference CDS and the predicted homologous CDS for each sequence.
###
### There are 3 columns under each header "CDS#<n> (all gaps)" named "tot", "net",
### and "string".
### The "tot" columns list the total number of gap positions in either sequence in the pairwise alignment.
### The "net" columns list the net number of the listed gaps in the pairwise alignment; this is the number
###   of gaps in the reference sequence minus the number of gaps in the current sequence (inserts minus deletes)
### The "string" columns include a list of <n> tokens, each of which describes a gap of length >= 1 nucleotide.
###
### Tokens are in the form: <char><position><length>
###   <char>     is 'I' for an insertion relative to the reference CDS (gap in reference sequence)
###              or 'D' for a  deletion  relative to the reference CDS (gap in current sequence)
###   <position> is the nucleotide position of the gap in reference coordinates.
###              For insertions this is the reference position after which the insertion occurs.
###              For deletions  this is the first reference position for this deletion.
###   <length>   length of the gap in nucleotides.
###              For insertions this is the number of nucleotides inserted relative to the reference
###              For deletions  this is the number of reference positions deleted.
#
# The text starting 'Explanation of above table' explains the meaning
# and format of the table. 
#
# The other two 'perseq' files are:
# NC_001346.gap.perseq-not3.txt and
# NC_001346.gap.perseq-special.txt
# 
# These contain slightly different information. The 'not3' file 
# includes the same information as the NC_001346.gap.perseq-all.txt
# but only contains information on gaps that have lengths which are
# NOT multiples of 3.
# 
# The 'special' file contains counts of an even more restricted set of
# gaps. The relevant explanatory comments in that file are:
#
### Specifically, these are counts of gaps X in a feature Y (CDS or mat_peptide), such that the following criteria are met:
###   - length of feature Y is not a multiple of 3
###   - if one removes only X from list of all gaps, total feature length of Y becomes a multiple of 3
###       with length difference of D with reference feature
###    - there are no other gaps Z such that if one removes only Z then length of Y becomes a multiple
###       of 3 with length difference D2 from reference where D2 < D.
#
####################
# 
# The 'pergap' files (4-6 in list above) are organized
# differently. Take a look at file #4:
#
cat NC_001346/NC_001346.gap.pergap-all.txt 
### Counts of all gaps:
###
##CDS#3 D1069:15 2
###
#
# This lists all different gaps as a line. Each line has 3
# space-delimited tokens. Token 1 is the feature the gap is in,
# 'CDS#3' in this case. Token 2 is a description of the gap, in the
# format described in the end of the
# 'NC_001346/NC_001346.gap.perseq-all.txt' file above. From that
# output:
#
### Tokens are in the form: <char><position><length>
###   <char>     is 'I' for an insertion relative to the reference CDS (gap in reference sequence)
###              or 'D' for a  deletion  relative to the reference CDS (gap in current sequence)
###   <position> is the nucleotide position of the gap in reference coordinates.
###              For insertions this is the reference position after which the insertion occurs.
###              For deletions  this is the first reference position for this deletion.
###   <length>   length of the gap in nucleotides.
###              For insertions this is the number of nucleotides inserted relative to the reference
###              For deletions  this is the number of reference positions deleted.
#
# So this gap 'D1069:15' is a deletion relative to the reference CDS
# at position 1069 of 15 nucleotides.
#
# The third token is the count of these gaps. There are exactly 2
# accessions with this gap.
#
# As with the 'perseq' files, there are two other 'pergap' files, with
# the names:
# NC_001346.gap.pergap-not3.txt
# NC_001346.gap.pergap-special.txt
#
# These are analogous to the similarly named 'not3' and 'special'
# perseq gap files.
#
#############################################
# Parallelizing the cmscan step with -sfarm
#############################################
#
# The -sfarm <n> option allows parallelism of the cmscan step into
# <n> farm jobs. From the usage above:
#
##  -sfarm <n> : split genome file into <n> pieces, submit <n> cmscan jobs and wait 3 minutes
##                  (changeable with -swait) before concatenating all the output files and continuing
##  -swait <n>    : with -sfarm, set number of minutes to wait for cmscan jobs to finish to <n> [df: 3]
# 
# If -sfarm is used, the script will submit the <n> jobs and wait 
# up to 3 minutes for all jobs to finish (checking if they are
# finished every 15 seconds). Once they are finished it will
# concatenate the results and carry on as usual. The -swait <m> option 
# can be used to change the maximum wait time to <m> minutes.
#
##############################################################
## Reproducibility and order-dependence of list of accessions
##############################################################
# 
# The results of the script are completely reproducible if the
# following two criteria are met:
# 
# 1) the same reference accession is listed as the first accession
# 2) none of the accessions have changed annotation, i.e. no versions
#    have changed for any of the accessions.
# 
# I realize (2) is a limitation and a TODO below is to have the
# script record not just accessions but versions as well, so the user
# will know when a version has changed.
#
QUESTION: Doesn't the next paragraph need to be changed to reflect the current code structure?
# Note that it is the preliminary step of dnaorg_virus_wrapper.pl
# (STEP 0 in the example run above) that collects data from the NCBI
# database. If versions of accessions change it will be the output of
# that step that will change, and subsequently affect the results of
# dnaorg_annotate_genomes.pl step. 
#
# The calibration step includes a simulation that does use randome
# numbers, but this does not threaten reproducibility because in the
# present usage, there is a single seed to the randome number
# generator and the seed is assigned deterministically.
# 
#################################################
# Naming convention for sequences in fasta files
#################################################
#
# Single exon nucleotide sequences are named <s>/<d1>-<d2>: 
# Where <s> is the sequence accession, <d1> is the coordinate of the
# start, and <d2> is the coordinate of the stop. 
#
# For example:
# NC_001346/150-455
#
# Multi-exon nucleotide sequences of <m> exons are similarly named,
# but contain <m> sets of <d1>-<d2>, one per exon separated by a
# single ','.
# 
# For example:
# NC_001346/2527-1886,1793-1353
# 
#
# Protein sequences are similarly named with the coordinates
# pertaining to nucleotide coordinates the protein was translated
# from. Additionally, the string "-translated" is appended to the
# name. 
#
# For the two examples above:
# NC_001346/150-455-translated
# NC_001346/2527-1886,1793-1353-translated
# 
########################################################
# Ancillary script: summarize_dnaorg_annotate_genomes.pl
########################################################
#
# The summarize_dnaorg_annotate_genomes.pl can help summarize
# information output from dnaorg_annotate_genomes.pl. 
#
# The script will print the available options if the user
# runs it without any command line arguments:
#
perl summarize_dnaorg_annotate_genomes.pl
##
##summarize_dnaorg_annotate_genomes.pl
##	<output file created by dnaorg_annotate_genomes.pl>
##
## This script summarizes an output file created by dnaorg_annotate_genomes.pl
## by listing counts of each value observed for each category.
## BASIC OPTIONS:
##  -passfail    : only print counts of PF and result values
##  -outkey <s>  : save file with values for each accession for keys matching <s>
##  -outname <s> : name output file <s>
##  -avgfid      : only print average fractional identities
##
#
# Currently it will only work on sequences-as-columns output.
# Let's try it on the output from example 1, using no command line options.
# The file NC_001346.seqcol.output file contains the output from 
# example run #1 STEP 3.
#
# By default, the script will generate output that displays counts of
# each value observed in each row. 
# Here I'll print only the beginning and end of the output because 
# the output is long, and then I'll briefly describe it below:
#
perl summarize_dnaorg_annotate_genomes.pl NC_001346.seqcol.output 
##
##accession
##NC_001346 1
##KJ699341  1
##KJ437659  1
##HQ693446  1
##HQ693435  1
##
##totlen
##2689 6
##2690 4
##
##origin sequence:#
##1 5
##
##origin sequence:start
##-7   1
##2534 2
##2535 2
##
##origin sequence:stop
##2    1
##2542 2
##2543 2
##
##origin sequence:offst
##0   1
##149 4
##
##origin sequence:PF
##P 5
##
##CDS #1 [single exon; +]:movement protein:start1
##150 1
##1   4
##
##CDS #1 [single exon; +]:movement protein:stop1
##455 1
##306 4
##################################################
# MIDDLE OF OUTPUT REMOVED FOR BREVITY!
##################################################
##result
##PASS PPPPP 5
##
#
#
# So, each unique row heading (e.g. accession, or 'origin
# sequence:start') is listed, followed by <n> lines where <n> is the
# number of unique values observed in the input table (the table
# output from dnaorg_annotate_genomes.pl). Each of these <n> lines
# has two space-delimited tokens. The first token is the value
# observed, and the second token is the number of times this value
# was observed. The order of the lines will be the order that the
# first tokens were observed in the input file. For example:
##
##origin sequence:stop
##2    1
##2542 2
##2543 2
# 
# The sequence row heading 'origin sequence:stop' occurs 5 times in
# the input file. The first accession has the value '2' for this
# heading. Then 2 other accessions have the value '2542' and 2 other
# (we also know that the second accession has this value because it
# occurs as the second line), and 2 other accessions have the value
# '2543'.
#
##########
# There are some useful options to the script:
# 
# One can only print the pass/fail and result values with -passfail,
# for example:
perl summarize_dnaorg_annotate_genomes.pl -passfail NC_001346.seqcol.output 
##origin sequence:PF
##P 5
##
##CDS #1 [single exon; +]:movement protein:PF
##P 5
##
##CDS #2 [single exon; +]:capsid protein:PF
##P 5
##
##CDS #3 [2 exons; -]:replication-associated protein:PF
##P 5
##
##CDS #4 [single exon; -]:replication-associated protein A:PF
##P 5
##
##overlaps?
##P 2 3.1/4.1,3.2/4.1 5
##
##result
##PASS PPPPP 5
#
#
# Also the -outkey <s> and -outname <f> options can be used to save
# per-accession for row headings matching <s> to a file <f>.
#
# For example:
perl summarize_dnaorg_annotate_genomes.pl -outkey result -outname tmp.result.summary NC_001346.seqcol.output 
########
# The final output line will be:
########
### Saved accessions and values for headings matching result to file tmp.result.summary.
#
# Here's what the tmp.result.summary file looks like:
cat tmp.result.summary 
##NC_001346 PASS PPPPP
##KJ699341 PASS PPPPP
##KJ437659 PASS PPPPP
##HQ693446 PASS PPPPP
##HQ693435 PASS PPPPP
#
# This file lists the value of the 'result' row heading for each
# accession.
#
#
# Finally, the -avgfid option will print average fractional identities
# for all row headings that are fractional identities. The averages
# are across all sequences in the output table.
# For example:
perl summarize_dnaorg_annotate_genomes.pl -avgfid NC_001346.seqcol.output 
##0.989 CDS #1 [single exon; +]:movement protein:fid1
##0.985 CDS #2 [single exon; +]:capsid protein:fid1
##0.991 CDS #3 [2 exons; -]:replication-associated protein:fid1
##0.982 CDS #3 [2 exons; -]:replication-associated protein:fid2
##0.989 CDS #4 [single exon; -]:replication-associated protein A:fid1
##0.988 avgid
#
# The first space-delimited token in each line is the average
# fractional identity between the predicted feature listed in the row
# heading (which is given in the remainder of the line) and the
# reference feature in a pairwise alignment.
#
-----------------------------------
TODOs:

- add version to accessions, and check that they are up-to-date somehow
  at beginning of run

- consider renaming -onlybuild to -1, -skipbuild to -2, -skipbuild
  + -skipscan to -3, and -skipbuild and -skipaln to -4, and then require one 
  of -1, -2, -3 and -4. If you do this, consider making a separate
  option to refetch genome sequences with -2, -3 and -4... if that
  makes sense after considering it more carefully than I am right now.

- add section to this file explaining gap notation!


#############################################
# Last updated: EPN, Tue Feb 16 16:18:38 2016
#############################################
#
# This directory is under git control. Use
# git commands to see revision history.
#
############################################
